from django.shortcuts import render_to_response
from django.http import HttpResponseRedirect, HttpResponseServerError, HttpResponse
from django.core.urlresolvers import reverse
import oauth
from utils import *
from models import User
from decorators import wants_user, needs_user
import simplejson as json

@needs_user('tauth_login')
def info(req):
	if 'POST' == req.method:
		req.user.email = req.POST['email']
		#errors = req.user.validate()
		errors = []
		if not errors: req.user.save()
		return render_to_response('info.html', {
			'user': req.user,
			'errors': errors
		})

	return render_to_response('info.html', {'user': req.user})

@needs_user('tauth_login')
def tauth_info(req):
	if 'POST' == req.method:
		req.user.email = req.POST['email']
		#errors = req.user.validate()
		errors = []
		if not errors: req.user.save()
		return render_to_response('info.html', {
			'user': req.user,
			'errors': errors
		})
	
	#print "REQUEST USER", req, dir(req), type(req.user), req.user.username
	user = User.objects.get(username=req.user.username)
	

	#print "USERRRRR", user.tweet("Yet another test.")
	return render_to_response('info.html', {'user': req.user})

@needs_user('tauth_login')
def follow_list(req):
	user = User.objects.get(username=req.user.username)	
	return HttpResponse(json.dumps(user.get_follow_list()))

@needs_user('tauth_login')
def follower_list(req):
	user = User.objects.get(username=req.user.username)	
	return HttpResponse(json.dumps(user.get_follower_list()))

@needs_user('tauth_login')
def friend_list(req):
	user = User.objects.get(username=req.user.username)	
	return HttpResponse(json.dumps(user.get_friend_list()))

@wants_user
def login(req):
	print req
	if req.user: return HttpResponseRedirect('tauth_info')
	token = get_unauthorized_token()
	req.session['token'] = token.to_string()
	return HttpResponseRedirect(get_authorization_url(token))

def callback(req):
	token = req.session.get('token', None)
	print "Token is ", token
	if not token:
		return render_to_response('callback.html', {
			'token': True
		})
	token = oauth.OAuthToken.from_string(token)
	print "oauth token is ", token
	if token.key != req.GET.get('oauth_token', 'no-token'):
		return render_to_response('callback.html', {
			'mismatch': True
		})
	token = get_authorized_token(token)
	print "authorized token is"

	# Actually login
	obj = is_authorized(token)
	if obj is None:
		return render_to_response('callback.html', {
			'username': True
		})
	print "Login in", obj, type(obj)
	try: user = User.objects.get(username=obj['screen_name'])
	except: user = User(username=obj['screen_name'])
	user.oauth_token = token.key
	user.oauth_token_secret = token.secret
	user.save()
	req.session['user_id'] = user.id
	del req.session['token']


	#print "USER", type(user), dir(user), user.tweet("testing tweets")
	print "Credentials", api('https://twitter.com/account/verify_credentials.json', token)
	print "Friends", api("http://api.twitter.com/1/friends/ids.json", token)

	st = "Testing"
	#print "update", api("http://api.twitter.com/1/statuses/update.json", 
	#		    token, 
	#		    http_method="POST", status=st)
	print "Returning auth_info"
	return HttpResponseRedirect(reverse('tauth_info'))

@wants_user
def logout(req):
	if req.user is not None:
		req.user.oauth_token = ''
		req.user.oauth_token_secret = ''
		req.user.save()
	req.session.flush()
	return render_to_response('logout.html', {})
