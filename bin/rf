#!/usr/bin/env python

##
## rf utility script
## Daniel Matysiak <daniel@ripplefunction.com>
##

import os
import shlex
import sys
import subprocess

#
# User-specific variables
#
# Remember to also set these environment variables in your shell
# rc like so:
#  export RFROOT = /home/daniel/ripplefunction
#  export RFBIN  = $RFROOT/src/bin
#  export RFSRC  = $RFROOT/src
#  export PATH=$PATH:$RFBIN
ENVIRON = dict()

def get_new_env():
    new_env = os.environ.copy()
    new_env.update(ENVIRON)
    return new_env

#
# Commands functions
#
def start_server(args):
    new_env = get_new_env()
    start_cmd = shlex.split('python %s/manage.py runserver' 
                            # FIX: use $RFSRC inline above instead 
                            #      of string substitution.
                            % new_env.get('RFSRC'))
    subprocess.Popen(start_cmd, env = os.environ)

def stop_server(args):
    stop_cmd = shlex.split('pkill -f "python.*manage.py"')
    subprocess.Popen(stop_cmd, env = os.environ)

def configure_env(args):
    new_env = get_new_env()
    os.execve(new_env.get('SHELL'), ('-',), new_env)

def commit_and_push(args):
    pass

def webfaction_login(args):
    pass

#
# List of commands
#
commands = { 'start': ('Starts rf django server', start_server),
             'stop': ('Stops rf django server', stop_server),
             'configure': ('Configures environment variables', configure_env),
             }

#
# Main
#
def main(params):
    _, command_fn = commands[params[0]]
    command_fn(params[1:])

if __name__ == '__main__':
    if len(sys.argv) < 2:
        print "rf utility command usage:"
        for cmd, desc_func in commands.items():
            print "\t%s - %s" % (cmd, desc_func[0])
    else:
        try:
            main(sys.argv[1:])
        except KeyError, ex:
            print "No such option %s" % str(ex)
