#!/usr/bin/env python

##
## rf utility script
## Daniel Matysiak <daniel@ripplefunction.com>
##

import os
import commands
import shlex
import sys
import subprocess

#
# User-specific variables
#
# Remember to also set these environment variables in your shell
# rc like so:
#  export RFROOT = /home/daniel/ripplefunction
#  export RFBIN  = $RFROOT/src/bin
#  export RFSRC  = $RFROOT/src
#  export PATH=$PATH:$RFBIN
ENVIRON = dict()

def get_new_env(**new_vars):
    new_env = os.environ.copy()
    new_env.update(ENVIRON)
    new_env.update(new_vars)
    return new_env

#
# Option functions
#
def start_server(args):
    """Starts rf django server"""
    new_env = get_new_env()
    start_cmd = shlex.split('python %s/manage.py runserver' 
                            # FIX: use $RFSRC inline above instead 
                            #      of string substitution.
                            % new_env.get('RFSRC'))
    p = subprocess.Popen(start_cmd, env = new_env)

def stop_server(args):
    """Stops rf django server"""
    new_env = get_new_env()
    stop_cmd = shlex.split('pkill -f "python.*manage.py"')
    subprocess.Popen(stop_cmd, env = new_env)

def status_server(args):
    """Status of rf django server"""
    out = int(commands.getoutput('pgrep -f "python.*manage.py" -c'))
    if out > 1:
        print
        print "running (%s)" % (out - 1,)
        print
    else:
        print
        print "stopped (%s)" % (out - 1,)
        print

def configure_env(args):
    """Configures environment variables"""
    new_env = get_new_env()
    os.execve(new_env.get('SHELL'), ('-',), new_env)

def search_code(args):
    """Searches code for given string"""
    new_env = get_new_env()
    search_cmd = shlex.split('grep -R -e %s %s' 
                             # FIX: use $RFSRC inline above instead 
                             #      of string substitution.
                             % (args[0], new_env.get('RFSRC')))
    subprocess.Popen(search_cmd, env = os.environ)

def find_file(args):
    """Searches for file"""
    new_env = get_new_env()
    search_cmd = shlex.split('find %s -name "%s"' 
                             # FIX: use $RFSRC inline above instead 
                             #      of string substitution.
                             % (new_env.get('RFSRC'), args[0]))
    subprocess.Popen(search_cmd, env = os.environ)

def deflake(args):
    """Runs a simple source checker on code"""
    new_env = get_new_env()
    deflake_cmd = shlex.split('pyflakes %s' 
                              # FIX: use $RFSRC inline above instead 
                              #      of string substitution.
                              % new_env.get('RFSRC'))
    subprocess.Popen(deflake_cmd, env = os.environ)

def commit_and_push(args):
    pass

def webfaction_login(args):
    pass

#
# List of options
#
options = { 'start': start_server,
            'stop': stop_server,
            'status': status_server,
            'configure': configure_env,
            'search': search_code,
            'find': find_file,
            'deflake': deflake,
            }

#
# Main
#
def main(params):
    option_fn = options[params[0]]
    option_fn(params[1:])

if __name__ == '__main__':
    if len(sys.argv) < 2:
        print "rf utility command usage:"
        for cmd, func in options.items():
            print "\t%s - %s" % (cmd, func.__doc__)
    else:
        try:
            main(sys.argv[1:])
        except KeyError, ex:
            print "No such option %s" % str(ex)
